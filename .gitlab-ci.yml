# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: python:3.10-buster

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

stages:          # List of stages for jobs, and their order of execution
  - connect
  - build
  - test
  - deploy

connect:
  image: postgres
  stage: connect
  services:
    - postgres:11
  script:
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Preparing environment"

    - python --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate

    - echo "Compiling the code..."
    - echo "Compile complete."

test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "TODO Tests"
    # - sleep 60
    # - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "TODO Deploy"
    # - echo "Deploying application..."
    # - echo "Application successfully deployed."

black:
  image: python:3.9
  stage: test
  allow_failure: true
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /hotfix/
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
    PIP_DOWNLOAD_CACHE: $CI_PROJECT_DIR/.cache/pip_download_cache
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .cache
  script:
    - pip install black==22.3
    - black --version
    - black --check --diff ./
